version: '3.8'

services:
  poke-mcp:
    build: .
    container_name: poke-mcp-production
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    environment:
      - SERVER_NAME=poke-mcp-production
      - SERVER_VERSION=1.0.0
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - ENABLE_METRICS=true
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - poke-mcp-network

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: poke-mcp-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - poke-mcp-network
    depends_on:
      - poke-mcp

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: poke-mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - poke-mcp-network
    depends_on:
      - prometheus

networks:
  poke-mcp-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
